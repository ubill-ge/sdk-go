/*
UBill API

UBill API - provides programmatic access to our resources. You will be able to integrate our service into your system and communicate with clients easily.

API version: 2.1.7
Contact: info@ubill.ge
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ubill

import (
	"encoding/json"
)

// checks if the DeliveryReportItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeliveryReportItem{}

// DeliveryReportItem struct for DeliveryReportItem
type DeliveryReportItem struct {
	Number   *string `json:"number,omitempty"`
	StatusID *string `json:"statusID,omitempty"`
}

// NewDeliveryReportItem instantiates a new DeliveryReportItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryReportItem() *DeliveryReportItem {
	this := DeliveryReportItem{}
	return &this
}

// NewDeliveryReportItemWithDefaults instantiates a new DeliveryReportItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryReportItemWithDefaults() *DeliveryReportItem {
	this := DeliveryReportItem{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *DeliveryReportItem) GetNumber() string {
	if o == nil || IsNil(o.Number) {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryReportItem) GetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *DeliveryReportItem) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *DeliveryReportItem) SetNumber(v string) {
	o.Number = &v
}

// GetStatusID returns the StatusID field value if set, zero value otherwise.
func (o *DeliveryReportItem) GetStatusID() string {
	if o == nil || IsNil(o.StatusID) {
		var ret string
		return ret
	}
	return *o.StatusID
}

// GetStatusIDOk returns a tuple with the StatusID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryReportItem) GetStatusIDOk() (*string, bool) {
	if o == nil || IsNil(o.StatusID) {
		return nil, false
	}
	return o.StatusID, true
}

// HasStatusID returns a boolean if a field has been set.
func (o *DeliveryReportItem) HasStatusID() bool {
	if o != nil && !IsNil(o.StatusID) {
		return true
	}

	return false
}

// SetStatusID gets a reference to the given string and assigns it to the StatusID field.
func (o *DeliveryReportItem) SetStatusID(v string) {
	o.StatusID = &v
}

func (o DeliveryReportItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeliveryReportItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.StatusID) {
		toSerialize["statusID"] = o.StatusID
	}
	return toSerialize, nil
}

type NullableDeliveryReportItem struct {
	value *DeliveryReportItem
	isSet bool
}

func (v NullableDeliveryReportItem) Get() *DeliveryReportItem {
	return v.value
}

func (v *NullableDeliveryReportItem) Set(val *DeliveryReportItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryReportItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryReportItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryReportItem(val *DeliveryReportItem) *NullableDeliveryReportItem {
	return &NullableDeliveryReportItem{value: val, isSet: true}
}

func (v NullableDeliveryReportItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryReportItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
