/*
UBill API

UBill API - provides programmatic access to our resources. You will be able to integrate our service into your system and communicate with clients easily.

API version: 2.1.7
Contact: info@ubill.ge
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ubill

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateBrandNamePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBrandNamePayload{}

// CreateBrandNamePayload struct for CreateBrandNamePayload
type CreateBrandNamePayload struct {
	BrandName string `json:"brandName"`
}

type _CreateBrandNamePayload CreateBrandNamePayload

// NewCreateBrandNamePayload instantiates a new CreateBrandNamePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBrandNamePayload(brandName string) *CreateBrandNamePayload {
	this := CreateBrandNamePayload{}
	this.BrandName = brandName
	return &this
}

// NewCreateBrandNamePayloadWithDefaults instantiates a new CreateBrandNamePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBrandNamePayloadWithDefaults() *CreateBrandNamePayload {
	this := CreateBrandNamePayload{}
	return &this
}

// GetBrandName returns the BrandName field value
func (o *CreateBrandNamePayload) GetBrandName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrandName
}

// GetBrandNameOk returns a tuple with the BrandName field value
// and a boolean to check if the value has been set.
func (o *CreateBrandNamePayload) GetBrandNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrandName, true
}

// SetBrandName sets field value
func (o *CreateBrandNamePayload) SetBrandName(v string) {
	o.BrandName = v
}

func (o CreateBrandNamePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBrandNamePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brandName"] = o.BrandName
	return toSerialize, nil
}

func (o *CreateBrandNamePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brandName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBrandNamePayload := _CreateBrandNamePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateBrandNamePayload)

	if err != nil {
		return err
	}

	*o = CreateBrandNamePayload(varCreateBrandNamePayload)

	return err
}

type NullableCreateBrandNamePayload struct {
	value *CreateBrandNamePayload
	isSet bool
}

func (v NullableCreateBrandNamePayload) Get() *CreateBrandNamePayload {
	return v.value
}

func (v *NullableCreateBrandNamePayload) Set(val *CreateBrandNamePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBrandNamePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBrandNamePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBrandNamePayload(val *CreateBrandNamePayload) *NullableCreateBrandNamePayload {
	return &NullableCreateBrandNamePayload{value: val, isSet: true}
}

func (v NullableCreateBrandNamePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBrandNamePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
