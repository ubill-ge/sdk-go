/*
UBill API

UBill API - provides programmatic access to our resources. You will be able to integrate our service into your system and communicate with clients easily.

API version: 2.1.7
Contact: info@ubill.ge
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ubill

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BrandName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandName{}

// BrandName struct for BrandName
type BrandName struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	Authorized string `json:"authorized"`
	CreatedAt  string `json:"createdAt"`
}

type _BrandName BrandName

// NewBrandName instantiates a new BrandName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandName(id string, name string, authorized string, createdAt string) *BrandName {
	this := BrandName{}
	this.Id = id
	this.Name = name
	this.Authorized = authorized
	this.CreatedAt = createdAt
	return &this
}

// NewBrandNameWithDefaults instantiates a new BrandName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandNameWithDefaults() *BrandName {
	this := BrandName{}
	return &this
}

// GetId returns the Id field value
func (o *BrandName) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BrandName) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BrandName) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *BrandName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BrandName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BrandName) SetName(v string) {
	o.Name = v
}

// GetAuthorized returns the Authorized field value
func (o *BrandName) GetAuthorized() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Authorized
}

// GetAuthorizedOk returns a tuple with the Authorized field value
// and a boolean to check if the value has been set.
func (o *BrandName) GetAuthorizedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authorized, true
}

// SetAuthorized sets field value
func (o *BrandName) SetAuthorized(v string) {
	o.Authorized = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BrandName) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BrandName) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BrandName) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o BrandName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["authorized"] = o.Authorized
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize, nil
}

func (o *BrandName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"authorized",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBrandName := _BrandName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBrandName)

	if err != nil {
		return err
	}

	*o = BrandName(varBrandName)

	return err
}

type NullableBrandName struct {
	value *BrandName
	isSet bool
}

func (v NullableBrandName) Get() *BrandName {
	return v.value
}

func (v *NullableBrandName) Set(val *BrandName) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandName) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandName(val *BrandName) *NullableBrandName {
	return &NullableBrandName{value: val, isSet: true}
}

func (v NullableBrandName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
