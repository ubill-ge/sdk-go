/*
UBill API

UBill API - provides programmatic access to our resources. You will be able to integrate our service into your system and communicate with clients easily.

API version: 2.1.7
Contact: info@ubill.ge
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ubill

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SMSPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMSPayload{}

// SMSPayload struct for SMSPayload
type SMSPayload struct {
	BrandID int64   `json:"brandID"`
	Numbers []int64 `json:"numbers"`
	Text    string  `json:"text"`
	// Enable/disable checking numbers in the stop list
	StopList bool `json:"stopList"`
}

type _SMSPayload SMSPayload

// NewSMSPayload instantiates a new SMSPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSPayload(brandID int64, numbers []int64, text string, stopList bool) *SMSPayload {
	this := SMSPayload{}
	this.BrandID = brandID
	this.Numbers = numbers
	this.Text = text
	this.StopList = stopList
	return &this
}

// NewSMSPayloadWithDefaults instantiates a new SMSPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSPayloadWithDefaults() *SMSPayload {
	this := SMSPayload{}
	return &this
}

// GetBrandID returns the BrandID field value
func (o *SMSPayload) GetBrandID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BrandID
}

// GetBrandIDOk returns a tuple with the BrandID field value
// and a boolean to check if the value has been set.
func (o *SMSPayload) GetBrandIDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrandID, true
}

// SetBrandID sets field value
func (o *SMSPayload) SetBrandID(v int64) {
	o.BrandID = v
}

// GetNumbers returns the Numbers field value
func (o *SMSPayload) GetNumbers() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value
// and a boolean to check if the value has been set.
func (o *SMSPayload) GetNumbersOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Numbers, true
}

// SetNumbers sets field value
func (o *SMSPayload) SetNumbers(v []int64) {
	o.Numbers = v
}

// GetText returns the Text field value
func (o *SMSPayload) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SMSPayload) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SMSPayload) SetText(v string) {
	o.Text = v
}

// GetStopList returns the StopList field value
func (o *SMSPayload) GetStopList() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StopList
}

// GetStopListOk returns a tuple with the StopList field value
// and a boolean to check if the value has been set.
func (o *SMSPayload) GetStopListOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StopList, true
}

// SetStopList sets field value
func (o *SMSPayload) SetStopList(v bool) {
	o.StopList = v
}

func (o SMSPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMSPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brandID"] = o.BrandID
	toSerialize["numbers"] = o.Numbers
	toSerialize["text"] = o.Text
	toSerialize["stopList"] = o.StopList
	return toSerialize, nil
}

func (o *SMSPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brandID",
		"numbers",
		"text",
		"stopList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMSPayload := _SMSPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMSPayload)

	if err != nil {
		return err
	}

	*o = SMSPayload(varSMSPayload)

	return err
}

type NullableSMSPayload struct {
	value *SMSPayload
	isSet bool
}

func (v NullableSMSPayload) Get() *SMSPayload {
	return v.value
}

func (v *NullableSMSPayload) Set(val *SMSPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSPayload(val *SMSPayload) *NullableSMSPayload {
	return &NullableSMSPayload{value: val, isSet: true}
}

func (v NullableSMSPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
